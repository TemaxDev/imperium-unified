name: backend-ci

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-and-tests:
    name: "py${{ matrix.python }} • impl=${{ matrix.impl }}"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        python: [ "3.12" ]
        impl: [ "memory", "file", "sql" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt
            backend/pyproject.toml

      - name: Install deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt || true
          # fallback si deps gérées via pyproject
          pip install -e ".[dev]" || true
          pip install pytest pytest-cov ruff black mypy anyio httpx sqlmodel

      - name: Ruff (lint)
        working-directory: backend
        run: ruff check .

      - name: Black (format check)
        working-directory: backend
        run: black --check .

      - name: MyPy (types)
        working-directory: backend
        run: mypy src

      - name: Unit tests + coverage
        working-directory: backend
        env:
          # pour file/sql, pas nécessairement utilisé ici mais safe par défaut
          AGER_STORAGE_PATH: ${{ github.workspace }}/backend/data/ci_state.json
          AGER_DB_PATH: ${{ github.workspace }}/backend/data/ci_ager.db
        run: |
          pytest -q
          pytest --cov=ager --cov-report=xml:coverage.xml --cov-report=term-missing

      - name: Contract tests (ports) for impl=${{ matrix.impl }}
        if: ${{ always() }}  # exécuter même si unit tests ont échoué, pour visibilité
        working-directory: backend
        env:
          TEST_ENGINE_IMPL: ${{ matrix.impl }}
        run: pytest -q tests/ports

      - name: Enforce coverage gate (>= 90%)
        if: ${{ success() }}
        working-directory: backend
        run: |
          pytest --cov=ager --cov-branch --cov-fail-under=90 -q

      - name: Upload coverage artifact (per impl)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ matrix.impl }}
          path: backend/coverage.xml
          if-no-files-found: ignore
